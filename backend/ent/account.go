// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ricardoraposo/gopherbank/ent/account"
	"github.com/ricardoraposo/gopherbank/ent/user"
)

// Account is the model entity for the Account schema.
type Account struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"number"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Balance holds the value of the "balance" field.
	Balance float64 `json:"balance"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"-"`
	// Admin holds the value of the "admin" field.
	Admin bool `json:"admin"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountQuery when eager-loading is set.
	Edges        AccountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AccountEdges holds the relations/edges for other nodes in the graph.
type AccountEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Favoriteds holds the value of the favoriteds edge.
	Favoriteds []*Account `json:"favoriteds,omitempty"`
	// Favorites holds the value of the favorites edge.
	Favorites []*Account `json:"favorites,omitempty"`
	// FromAccount holds the value of the from_account edge.
	FromAccount []*Transaction `json:"fromAccount"`
	// ToAccount holds the value of the to_account edge.
	ToAccount []*Transaction `json:"toAccount"`
	// DepositRequest holds the value of the deposit_request edge.
	DepositRequest []*DepositRequest `json:"deposit_request,omitempty"`
	// Notification holds the value of the notification edge.
	Notification []*Notification `json:"notification,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// FavoritedsOrErr returns the Favoriteds value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) FavoritedsOrErr() ([]*Account, error) {
	if e.loadedTypes[1] {
		return e.Favoriteds, nil
	}
	return nil, &NotLoadedError{edge: "favoriteds"}
}

// FavoritesOrErr returns the Favorites value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) FavoritesOrErr() ([]*Account, error) {
	if e.loadedTypes[2] {
		return e.Favorites, nil
	}
	return nil, &NotLoadedError{edge: "favorites"}
}

// FromAccountOrErr returns the FromAccount value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) FromAccountOrErr() ([]*Transaction, error) {
	if e.loadedTypes[3] {
		return e.FromAccount, nil
	}
	return nil, &NotLoadedError{edge: "from_account"}
}

// ToAccountOrErr returns the ToAccount value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) ToAccountOrErr() ([]*Transaction, error) {
	if e.loadedTypes[4] {
		return e.ToAccount, nil
	}
	return nil, &NotLoadedError{edge: "to_account"}
}

// DepositRequestOrErr returns the DepositRequest value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) DepositRequestOrErr() ([]*DepositRequest, error) {
	if e.loadedTypes[5] {
		return e.DepositRequest, nil
	}
	return nil, &NotLoadedError{edge: "deposit_request"}
}

// NotificationOrErr returns the Notification value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) NotificationOrErr() ([]*Notification, error) {
	if e.loadedTypes[6] {
		return e.Notification, nil
	}
	return nil, &NotLoadedError{edge: "notification"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Account) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case account.FieldAdmin:
			values[i] = new(sql.NullBool)
		case account.FieldBalance:
			values[i] = new(sql.NullFloat64)
		case account.FieldID, account.FieldPassword:
			values[i] = new(sql.NullString)
		case account.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Account fields.
func (a *Account) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case account.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case account.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				a.Password = value.String
			}
		case account.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				a.Balance = value.Float64
			}
		case account.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case account.FieldAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field admin", values[i])
			} else if value.Valid {
				a.Admin = value.Bool
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Account.
// This includes values selected through modifiers, order, etc.
func (a *Account) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Account entity.
func (a *Account) QueryUser() *UserQuery {
	return NewAccountClient(a.config).QueryUser(a)
}

// QueryFavoriteds queries the "favoriteds" edge of the Account entity.
func (a *Account) QueryFavoriteds() *AccountQuery {
	return NewAccountClient(a.config).QueryFavoriteds(a)
}

// QueryFavorites queries the "favorites" edge of the Account entity.
func (a *Account) QueryFavorites() *AccountQuery {
	return NewAccountClient(a.config).QueryFavorites(a)
}

// QueryFromAccount queries the "from_account" edge of the Account entity.
func (a *Account) QueryFromAccount() *TransactionQuery {
	return NewAccountClient(a.config).QueryFromAccount(a)
}

// QueryToAccount queries the "to_account" edge of the Account entity.
func (a *Account) QueryToAccount() *TransactionQuery {
	return NewAccountClient(a.config).QueryToAccount(a)
}

// QueryDepositRequest queries the "deposit_request" edge of the Account entity.
func (a *Account) QueryDepositRequest() *DepositRequestQuery {
	return NewAccountClient(a.config).QueryDepositRequest(a)
}

// QueryNotification queries the "notification" edge of the Account entity.
func (a *Account) QueryNotification() *NotificationQuery {
	return NewAccountClient(a.config).QueryNotification(a)
}

// Update returns a builder for updating this Account.
// Note that you need to call Account.Unwrap() before calling this method if this Account
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Account) Update() *AccountUpdateOne {
	return NewAccountClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Account entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Account) Unwrap() *Account {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Account is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Account) String() string {
	var builder strings.Builder
	builder.WriteString("Account(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("password=")
	builder.WriteString(a.Password)
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", a.Balance))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("admin=")
	builder.WriteString(fmt.Sprintf("%v", a.Admin))
	builder.WriteByte(')')
	return builder.String()
}

// Accounts is a parsable slice of Account.
type Accounts []*Account
