// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountsColumns holds the columns for the "accounts" table.
	AccountsColumns = []*schema.Column{
		{Name: "number", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "balance", Type: field.TypeFloat64, Default: 0},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "admin", Type: field.TypeBool, Default: false},
	}
	// AccountsTable holds the schema information for the "accounts" table.
	AccountsTable = &schema.Table{
		Name:       "accounts",
		Columns:    AccountsColumns,
		PrimaryKey: []*schema.Column{AccountsColumns[0]},
	}
	// DepositRequestsColumns holds the columns for the "deposit_requests" table.
	DepositRequestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "amount", Type: field.TypeFloat64},
		{Name: "status", Type: field.TypeString, Default: "pending"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "account_deposit_request", Type: field.TypeString, Nullable: true},
	}
	// DepositRequestsTable holds the schema information for the "deposit_requests" table.
	DepositRequestsTable = &schema.Table{
		Name:       "deposit_requests",
		Columns:    DepositRequestsColumns,
		PrimaryKey: []*schema.Column{DepositRequestsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "deposit_requests_accounts_deposit_request",
				Columns:    []*schema.Column{DepositRequestsColumns[4]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// NotificationsColumns holds the columns for the "notifications" table.
	NotificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "content", Type: field.TypeString},
		{Name: "read", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "account_notification", Type: field.TypeString, Nullable: true},
	}
	// NotificationsTable holds the schema information for the "notifications" table.
	NotificationsTable = &schema.Table{
		Name:       "notifications",
		Columns:    NotificationsColumns,
		PrimaryKey: []*schema.Column{NotificationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notifications_accounts_notification",
				Columns:    []*schema.Column{NotificationsColumns[5]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TransactionsColumns holds the columns for the "transactions" table.
	TransactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "account_from_account", Type: field.TypeString, Nullable: true},
		{Name: "account_to_account", Type: field.TypeString, Nullable: true},
	}
	// TransactionsTable holds the schema information for the "transactions" table.
	TransactionsTable = &schema.Table{
		Name:       "transactions",
		Columns:    TransactionsColumns,
		PrimaryKey: []*schema.Column{TransactionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transactions_accounts_from_account",
				Columns:    []*schema.Column{TransactionsColumns[1]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "transactions_accounts_to_account",
				Columns:    []*schema.Column{TransactionsColumns[2]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TransactionDetailsColumns holds the columns for the "transaction_details" table.
	TransactionDetailsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "amount", Type: field.TypeFloat64},
		{Name: "type", Type: field.TypeString},
		{Name: "transacted_at", Type: field.TypeTime},
		{Name: "transaction_detail", Type: field.TypeInt, Unique: true},
	}
	// TransactionDetailsTable holds the schema information for the "transaction_details" table.
	TransactionDetailsTable = &schema.Table{
		Name:       "transaction_details",
		Columns:    TransactionDetailsColumns,
		PrimaryKey: []*schema.Column{TransactionDetailsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transaction_details_transactions_detail",
				Columns:    []*schema.Column{TransactionDetailsColumns[4]},
				RefColumns: []*schema.Column{TransactionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "first_name", Type: field.TypeString, Size: 50},
		{Name: "last_name", Type: field.TypeString, Size: 50},
		{Name: "email", Type: field.TypeString},
		{Name: "picture_url", Type: field.TypeString, Nullable: true, Default: "https://i.imgur.com/fLjGgnc.png"},
		{Name: "account_user", Type: field.TypeString, Unique: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_accounts_user",
				Columns:    []*schema.Column{UsersColumns[5]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// AccountFavoritesColumns holds the columns for the "account_favorites" table.
	AccountFavoritesColumns = []*schema.Column{
		{Name: "account_id", Type: field.TypeString},
		{Name: "favorited_id", Type: field.TypeString},
	}
	// AccountFavoritesTable holds the schema information for the "account_favorites" table.
	AccountFavoritesTable = &schema.Table{
		Name:       "account_favorites",
		Columns:    AccountFavoritesColumns,
		PrimaryKey: []*schema.Column{AccountFavoritesColumns[0], AccountFavoritesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "account_favorites_account_id",
				Columns:    []*schema.Column{AccountFavoritesColumns[0]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "account_favorites_favorited_id",
				Columns:    []*schema.Column{AccountFavoritesColumns[1]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountsTable,
		DepositRequestsTable,
		NotificationsTable,
		TransactionsTable,
		TransactionDetailsTable,
		UsersTable,
		AccountFavoritesTable,
	}
)

func init() {
	DepositRequestsTable.ForeignKeys[0].RefTable = AccountsTable
	NotificationsTable.ForeignKeys[0].RefTable = AccountsTable
	TransactionsTable.ForeignKeys[0].RefTable = AccountsTable
	TransactionsTable.ForeignKeys[1].RefTable = AccountsTable
	TransactionDetailsTable.ForeignKeys[0].RefTable = TransactionsTable
	UsersTable.ForeignKeys[0].RefTable = AccountsTable
	AccountFavoritesTable.ForeignKeys[0].RefTable = AccountsTable
	AccountFavoritesTable.ForeignKeys[1].RefTable = AccountsTable
}
