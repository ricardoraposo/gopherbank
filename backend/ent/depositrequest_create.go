// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ricardoraposo/gopherbank/ent/account"
	"github.com/ricardoraposo/gopherbank/ent/depositrequest"
)

// DepositRequestCreate is the builder for creating a DepositRequest entity.
type DepositRequestCreate struct {
	config
	mutation *DepositRequestMutation
	hooks    []Hook
}

// SetAmount sets the "amount" field.
func (drc *DepositRequestCreate) SetAmount(f float64) *DepositRequestCreate {
	drc.mutation.SetAmount(f)
	return drc
}

// SetStatus sets the "status" field.
func (drc *DepositRequestCreate) SetStatus(s string) *DepositRequestCreate {
	drc.mutation.SetStatus(s)
	return drc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (drc *DepositRequestCreate) SetNillableStatus(s *string) *DepositRequestCreate {
	if s != nil {
		drc.SetStatus(*s)
	}
	return drc
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (drc *DepositRequestCreate) SetAccountID(id string) *DepositRequestCreate {
	drc.mutation.SetAccountID(id)
	return drc
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (drc *DepositRequestCreate) SetNillableAccountID(id *string) *DepositRequestCreate {
	if id != nil {
		drc = drc.SetAccountID(*id)
	}
	return drc
}

// SetAccount sets the "account" edge to the Account entity.
func (drc *DepositRequestCreate) SetAccount(a *Account) *DepositRequestCreate {
	return drc.SetAccountID(a.ID)
}

// Mutation returns the DepositRequestMutation object of the builder.
func (drc *DepositRequestCreate) Mutation() *DepositRequestMutation {
	return drc.mutation
}

// Save creates the DepositRequest in the database.
func (drc *DepositRequestCreate) Save(ctx context.Context) (*DepositRequest, error) {
	drc.defaults()
	return withHooks(ctx, drc.sqlSave, drc.mutation, drc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (drc *DepositRequestCreate) SaveX(ctx context.Context) *DepositRequest {
	v, err := drc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drc *DepositRequestCreate) Exec(ctx context.Context) error {
	_, err := drc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drc *DepositRequestCreate) ExecX(ctx context.Context) {
	if err := drc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drc *DepositRequestCreate) defaults() {
	if _, ok := drc.mutation.Status(); !ok {
		v := depositrequest.DefaultStatus
		drc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drc *DepositRequestCreate) check() error {
	if _, ok := drc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "DepositRequest.amount"`)}
	}
	if v, ok := drc.mutation.Amount(); ok {
		if err := depositrequest.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "DepositRequest.amount": %w`, err)}
		}
	}
	if _, ok := drc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "DepositRequest.status"`)}
	}
	if v, ok := drc.mutation.Status(); ok {
		if err := depositrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DepositRequest.status": %w`, err)}
		}
	}
	return nil
}

func (drc *DepositRequestCreate) sqlSave(ctx context.Context) (*DepositRequest, error) {
	if err := drc.check(); err != nil {
		return nil, err
	}
	_node, _spec := drc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	drc.mutation.id = &_node.ID
	drc.mutation.done = true
	return _node, nil
}

func (drc *DepositRequestCreate) createSpec() (*DepositRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &DepositRequest{config: drc.config}
		_spec = sqlgraph.NewCreateSpec(depositrequest.Table, sqlgraph.NewFieldSpec(depositrequest.FieldID, field.TypeInt))
	)
	if value, ok := drc.mutation.Amount(); ok {
		_spec.SetField(depositrequest.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := drc.mutation.Status(); ok {
		_spec.SetField(depositrequest.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if nodes := drc.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   depositrequest.AccountTable,
			Columns: []string{depositrequest.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.account_deposit_request = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DepositRequestCreateBulk is the builder for creating many DepositRequest entities in bulk.
type DepositRequestCreateBulk struct {
	config
	err      error
	builders []*DepositRequestCreate
}

// Save creates the DepositRequest entities in the database.
func (drcb *DepositRequestCreateBulk) Save(ctx context.Context) ([]*DepositRequest, error) {
	if drcb.err != nil {
		return nil, drcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(drcb.builders))
	nodes := make([]*DepositRequest, len(drcb.builders))
	mutators := make([]Mutator, len(drcb.builders))
	for i := range drcb.builders {
		func(i int, root context.Context) {
			builder := drcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DepositRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drcb *DepositRequestCreateBulk) SaveX(ctx context.Context) []*DepositRequest {
	v, err := drcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drcb *DepositRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := drcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcb *DepositRequestCreateBulk) ExecX(ctx context.Context) {
	if err := drcb.Exec(ctx); err != nil {
		panic(err)
	}
}
